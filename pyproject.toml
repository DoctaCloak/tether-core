# pyproject.toml

[tool.poetry]
name = "tethercore"
version = "0.1.0" # Initial development version
description = "TetherCore: A Sovereign AI Companion. Your Mind, Your Data, Your AI. Built on Trust."
authors = ["Christopher Taylor <christopher.taylor.jr@outlook.com>"] # Replace with your actual email if desired
readme = "README.md"
license = "MIT"
repository = "https://github.com/DoctaCloak/tether-core"
keywords = ["ai", "sovereign ai", "personal ai", "privacy", "llm", "memory", "agent"]

# Specify compatible Python versions
[tool.poetry.dependencies]
python = ">=3.10, <3.13" # Compatible with Python 3.10, 3.11, 3.12

# Core TetherCore Dependencies
litellm = "^1.34.30"       # For LLM routing
# For PySyft (OpenMined) - choose the appropriate package.
# 'syft' is the core library. You might need specific extras.
# Check the latest PySyft documentation for installation recommendations.
syft = {version = "^0.8.7", extras = ["data_science"]} # Example, adjust as needed
# Vector Database Clients (choose one or both if you plan to support them)
weaviate-client = "^4.5.6" # If using Weaviate
# chromadb = "^0.4.24"       # If using ChromaDB and its client library

# CLI Tooling
click = "^8.1.7"           # For tether-cli (Typer is built on Click)
typer = {version = "^0.12.3", extras = ["all"]} # For tether-cli, 'all' extras for rich support

# Data Validation & Settings Management
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"

# Configuration file parsing
pyyaml = "^6.0.1"

# For Agent Runtime (Docker SDK)
docker = "^7.0.0"

# For any potential lightweight web services/APIs within the Python backend (optional)
# fastapi = "^0.111.0"
# uvicorn = {version = "^0.29.0", extras = ["standard"]}

# Other utilities
python-dotenv = "^1.0.1"   # For loading .env files

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.2.0"
pytest-cov = "^5.0.0"      # For test coverage
pytest-asyncio = "^0.23.6" # If you have async code to test

# Linting & Formatting
ruff = "^0.4.4"            # Fast linter and formatter (replaces flake8, isort, black)

# Pre-commit hooks (optional but recommended)
pre-commit = "^3.7.0"

# For type checking (optional, Ruff can do some of this)
# mypy = "^1.10.0"

# For notebooks if you use them for experimentation
# jupyterlab = "^4.2.0"
# ipykernel = "^6.29.4"

# For building documentation (optional)
# sphinx = "^7.3.7"
# sphinx-rtd-theme = "^2.0.0"

# Script entry point for tether-cli
# This allows you to run 'tether-cli' directly after 'poetry install'
# if 'tethercore_cli.main:app' points to your Typer application instance.
[tool.poetry.scripts]
tether-cli = "tethercore_cli.main:app" # Assuming your Typer app is named 'app' in 'tethercore_cli/main.py'

# Configuration for Ruff (Linter and Formatter)
[tool.ruff]
line-length = 88
indent-width = 4
# Select rules to enable. Start with a good base and add more as needed.
# See Ruff documentation for all available rules: https://docs.astral.sh/ruff/rules/
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort (import sorting)
    "C90", # mccabe complexity
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "SIM",# flake8-simplify
    "T20",# flake8-print
    "PTH",# flake8-use-pathlib
    "ISC", # flake8-implicit-str-concat
]
ignore = [
    "E501", # Line too long (handled by formatter)
    "B008", # Do not perform function calls in argument defaults (sometimes acceptable)
    "C901", # Function too complex (sometimes necessary, review individually)
]
fixable = ["ALL"]
unfixable = []

# Exclude files/directories from linting/formatting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*", # Example: exclude Django migrations
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["tethercore_engine", "tethercore_cli"] # Your project's top-level packages

# Configuration for Pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src/tethercore_engine --cov=tethercore_cli --cov-report=term-missing --cov-report=xml" # Add options like coverage
testpaths = [
    "tests", # Directory where your tests are located
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# Example: Register markers
# markers = [
#     "slow: marks tests as slow to run",
#     "integration: marks integration tests",
# ]

# Optional: If you use environment variables for tests
# env = [
#     "MY_SETTING=value",
# ]

# Build system configuration (standard for Poetry)
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

